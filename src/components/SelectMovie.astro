---
import { type Movie } from "@/types/Types";
import { getMovies } from "@/lib/sbfunctions";
import IconQuote from "./icons/iconQuote.astro";

const movies: Movie[] = await getMovies();
---

<div
  class="formCard rounded-lg border border-black/50 bg-black/50 px-6 py-6 text-center shadow-lg"
>
  <form action="#" method="post" id="form">
    <label
      for="movie"
      class="flex items-center justify-center gap-x-2 font-marker2 text-2xl text-red-500 md:text-3xl"
      >Â¿CuÃ¡l es tu pelÃ­cula<br />de terror favorita? <div>
        <button
          id="sm-play"
          type="button"
          class="font-emoji transition hover:-rotate-3 hover:scale-110"
          >ðŸ”Š</button
        >
        <audio id="scary-movie">
          <source src="/what-is-your-scary-movie.mp3" type="audio/mpeg" />
        </audio>
      </div></label
    >

    <input
      type="text"
      id="movie"
      name="movie"
      placeholder="Nombre de la pelÃ­cula"
      class="my-6 w-full rounded-md border border-red-900 bg-red-900/20 px-3 py-2 text-2xl text-red-900 placeholder-red-400/20 outline-none focus-visible:bg-red-900/30"
    />

    <div class="py-2">
      <h2 class="font-mona text-sm italic text-red-300">
        Â¿No se te ocurre ninguna pelÃ­cula?, acÃ¡ tenÃ©s unas sugerencias:
      </h2>
      <div id="sugerencias" class="flex flex-wrap justify-center gap-4 py-4">
        {
          movies.map((movie) => (
            <button
              type="button"
              class="group relative inline-block px-1 font-mona text-white before:absolute before:bottom-0 before:start-0 before:-z-[1] before:h-0.5 before:w-full before:origin-left before:scale-x-0 before:bg-red-700 before:transition hover:text-white/80 hover:before:scale-x-100"
            >
              {movie.title}
            </button>
          ))
        }
      </div>
    </div>

    <button
      type="submit"
      class="inline-flex items-center gap-x-2 rounded-md bg-red-600 px-6 py-2 font-mona text-xl text-white transition hover:-rotate-1 hover:scale-110 hover:bg-red-700"
      >Generar cita <IconQuote /></button
    >
  </form>
</div>
<script>
  import { navigate } from "astro:transitions/client";
  const smplay = document.getElementById("sm-play") as HTMLElement;
  const sugerencias = document.getElementById("sugerencias") as HTMLElement;
  const movie = document.getElementById("movie") as HTMLInputElement;
  const form = document.getElementById("form") as HTMLFormElement;

  // audio
  smplay.addEventListener("click", () => {
    smplay.innerText = "ðŸ”Š";
    const audio = document.querySelector("#scary-movie") as HTMLAudioElement;
    audio.volume = 0.1;
    audio.play();
  });

  // form
  const bntsugs = sugerencias.querySelectorAll(
    "button"
  ) as NodeListOf<HTMLButtonElement>;

  bntsugs.forEach((btn, i) => {
    btn.addEventListener("click", () => {
      movie.value = btn.innerText;
      //console.log(movie.value);
      generateQuote();
    });
  });

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    generateQuote();
  });

  async function generateQuote() {
    const data = new FormData(form);

    const response = await fetch("/api/quote", {
      method: "POST",
      body: data,
    });

    if (response.ok) {
      const quote = await response.json();

      // Retrieve the current quotes array from local storage, or initialize a new array if none exist
      const currentQuotes = JSON.parse(localStorage.getItem("quotes") || "[]");

      // Add the new quote to the array
      currentQuotes.push(quote);

      // Save the updated array back to local storage
      localStorage.setItem("quotes", JSON.stringify(currentQuotes));

      navigate(`/quote/generate`);
    } else {
      alert("Error al recibir quote");
    }
  }
</script>
